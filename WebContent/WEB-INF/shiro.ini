[main]
authc.loginUrl = /login.xhtml
authc.successUrl = /index.xhtml
logout.redirectUrl = /login.xhtml
authc.usernameParam = login:username
authc.passwordParam = login:password
user.loginUrl = /login.xhtml

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = select password from user_account where active = true and username LIKE ?
jdbcRealm.userRolesQuery = select role_name from role where id in(select role_id from user_role where user_account_id = (select id from user_account where username LIKE ?) and active = true) and active = true

ds = org.postgresql.jdbc2.optional.SimpleDataSource
ds.serverName = localhost:5432
ds.user = nextramile_user
ds.password = @uToma7ically
ds.databaseName = nextramile_db
jdbcRealm.dataSource = $ds

hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 512
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true

# We use this one to create a new test user with a hashed password.
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

#jdbcRealm.credentialsMatcher = $sha256Matcher
jdbcRealm.credentialsMatcher = $passwordMatcher

[users]

[urls]

/javax.faces.resource/** = anon
/favicon.ico = anon
/template** = anon
/notfound.xhtml = anon
/internalerror.xhtml = anon
/sessionexpired.xhtml = anon

/install.xhtml = anon
/install-complete.xhtml = anon
/left-menu.xhtml = anon

/unauthorized.xhtml = authc

/mmmanage** = authc, roles[Admin]
/aaadmin** = authc, roles[Admin]

/transaction-list.xhtml = authc

/index.xhtml = authc
/login.xhtml = authc
/logout.xhtml = logout


/change-password.xhtml = authc
/ = authc
#/** = ssl